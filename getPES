#!/bin/bash
#


############# VARIABLES
USERFILEPATH=`whoami`
DIR=`pwd`
HOST=`ident_host | awk '{print $1}'`
HOSTIP=`ident_host | awk '{print $2}'`
#default settings: these may be changed by some arguments
CSVFILEFILEPATH="PES-summary.csv"
MERGEAPPENDIX="merge_info_PES-summary.txt"
CSVDELIM=";"
DECISEP="."
SCRIPTDIR=`dirname $(readlink -f ${0})`
DEPTH=1 #depth of search -1=all 0=current n=n subfolders
VARFILE=all # given output-file for analysis ( Default: all )
TEMPDATA=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo ''); TEMPDATA=temp-getPES-$TEMPDATA
TEMPDATA2=temp-$TEMPDATA

######################################################
#           FUNCTIONS START
######################################################

function prnt_error {
echo -e  "\033[0;31m ERROR ! stopping script \033[0m "
}

function prnt_warning {
echo -e "\033[1;33m WARNING ! \033[0m "
}

function prnt_ok {
echo -e -n "\033[0;32m OK: \033[0m "
}

function format_strings { # formats stuff like the full path to the file, the dir in which the file is stored and the filename
FILENAME=`echo " $FILEPATH" | sed -e 's@\/@ @g' | awk '{print $NF}'`
FILENAMFORMATTED=`echo "$FILENAME" | cut -c -24 `
FILEPATHFORMATTED=`echo "$FILEPATH" | rev | cut -c -24 | rev`
FULLPATH=$FILEPATH
}

function ident_prog {

PROGID=0
PROGNAME="none"

FILEHEAD=`head -5 $FILEPATH`

IDENTORCA=`echo "$FILEHEAD" | grep -c " * O   R   C   A *"`
IDENTGAUSSIAN=`echo "$FILEHEAD" | grep -c " Entering Gaussian System, Link 0"`
IDENTXTB=`echo "$FILEHEAD" | grep -c "    |                           x T B                           |    "`
IDENTCREST=`echo "$FILEHEAD" | grep -c "       |                 C R E S T                  |"`

IDENTSTRING=`echo "$IDENTORCA $IDENTGAUSSIAN $IDENTXTB $IDENTCREST" | sed -e 's@ @@g'`

case "$IDENTSTRING" in
        1000) PROGNAME="ORCA" ;;
        0100) PROGNAME="Gaussian" ;;
        0010) PROGNAME="xTB" ;;
        0001) PROGNAME="crest" ;;
        *) PROGNAME="unknown" ;;
esac



#PROGNAME="$IDENTSTRING"

}

function checkrevDSDPBEP86D4 {
unset check1 check2 check3 
check1=$(grep "SCF SETTINGS" -A30 $FILEPATH)
check2=$(grep "RI-MP2 ENERGY" -A30 $FILEPATH)
check3=$(grep "DFTD4" -A20 $FILEPATH)

if [[ -z $check1 || -z $check2 || -z $check3 ]] ; then return; fi 
if ! [[ $(echo "$check1" | grep -m1 -n -E "^[ \t]*Exchange Functional    Exchange        .... PBE$" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(echo "$check1" | grep -m1 -n -E "^[ \t]*Correlation Functional Correlation     .... P86$" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(echo "$check1" | grep -m1 -n -E "^[ \t]*Fraction HF Exchange ScalHFX         ....  0.690*$" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(echo "$check1" | grep -m1 -n -E "^[ \t]*Scaling of DF-GGA-C  ScalDFC         ....  0.4210*$" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(echo "$check2" | grep -m1 -n -E "^[ \t]*Scaling for aa/bb pairs                   ...   6.360*e-02$" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(echo "$check2" | grep -m1 -n -E "^[ \t]*Scaling for ab pairs                      ...   5.9220*e-01$" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(echo "$check3" | grep -m1 -n "A user input s6-coefficient scaling factor has been recognized" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(echo "$check3" | grep -m1 -n "A user input a1-coefficient scaling factor has been recognized" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(echo "$check3" | grep -m1 -n "A user input s8-coefficient scaling factor has been recognized" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(echo "$check3" | grep -m1 -n "A user input a2-coefficient scaling factor has been recognized" | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(grep -E -i -n -m1 "d3s6[ \t]+0.51320*$" $FILEPATH | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(grep -E -i -n -m1 "d3s8[ \t]+0.0*$" $FILEPATH | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(grep -E -i -n -m1 "d3a1[ \t]+0.440*$" $FILEPATH | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
if ! [[ $(grep -E -i -n -m1 "d3a2[ \t]+3.60*$" $FILEPATH | cut -f1 -d':') =~ ^[0-9]+$ ]] ; then return; fi
METH='revDSD-PBEP86-D4'

}

function find_methode { # gives the used Method
if [ $PROGNAME = "Gaussian" ] 	### not yet finished
then
        TEST=`grep -m 1 "GINC-" $FILEPATH `
        if [ -n "$TEST" ]
        then
                RAW=`grep -m 1 "GINC-" $FILEPATH | sed -e 's.\\\. .g'`
                METH=` echo $RAW | awk '{print $5}'`
                BASIS=`echo $RAW | awk '{print $6}'`
        fi

#### search for additive Dispersion correction considering GD2, GD3, GD3BJ
        unset DISPCORR
        for DISPKEY in GD2 GD3; do
                if grep -i -q "empiricaldispersion=$DISPKEY" $FILEPATH; then
                        DISPCORR=$DISPKEY
                fi
        done

        case $DISPCORR in
                GD2) METH=$METH'-D2'
                ;;
                GD3)    if grep -i -q "empiricaldispersion=GD3BJ" $FILEPATH; then
                                        METH=$METH'-D3(BJ)'
                                else
                                        METH=$METH'-D3'
                                fi
                ;;
        esac
fi


if [ $PROGNAME = "ORCA" ]
then
        RAW=`grep "| " $FILEPATH  | grep "!"`
        METH=` echo $RAW | awk '{print $4}'`
        BASIS=`grep "Your calculation utilizes the basis:" $FILEPATH | awk '{print $NF}'`
		if [ "$METH" = "RKS" ] ; then checkrevDSDPBEP86D4 ; fi
#BASIS=`echo $RAW | awk '{print $5}'`
fi

METHBASIS="$METH"/"$BASIS"

## alias
if [ "$METHBASIS" = "PBEh-3c/def2-mSVP" ]; then METHBASIS='PBEh-3c'; fi

}

function find_energ {
case "$PROGNAME" in
        Gaussian)
                TEST=`grep -m 1 -c "SCF Done:  " $FILEPATH`
                if [ "$TEST" != 0 ]
                        then
                        ENERG_EL=`tac $FILEPATH | grep -m 1 "SCF Done:  " | awk '{print $5}'`
                fi
        ;;
        ORCA)
                TEST=`grep -m 1 -c "FINAL SINGLE POINT ENERGY" $FILEPATH`
                if [ "$TEST" != 0 ]
                        then
                        ENERG_EL=`tac $FILEPATH | grep -m 1 "FINAL SINGLE POINT ENERGY" | awk '{print $5}'`
                fi
        #       ENERG_EL=`tac $FILEPATH | grep -m 1 "FINAL SINGLE POINT ENERGY"  | awk '{print $5}'`
        ;;
        xTB)
                ENERG_EL=`grep "         | TOTAL ENERGY" $FILEPATH | awk '{print $4}'`
        ;;
        crest)
                ENERG_EL=`tac $FILEPATH | grep -m 1 "E lowest       " | awk '{print $4}'`
        ;;
esac

}

function find_ther_corr { # finds the themal corrections to electronic Energy

if [ $PROGNAME = "Gaussian" ]
then
TEST=`grep -c -i "Zero-point correction=" $FILEPATH `
        if [ "$TEST" != "0" ]
        then

        TEST=`grep -m 1 -A 15 "Zero-point correction=" $FILEPATH`

        ZPVE=`       echo -e "$TEST"| grep "Zero-point correction=" | awk '{print $3}'`
        ENERG_THERM=`echo -e "$TEST"| grep "Thermal correction to Energy=" | awk '{print $5}'`
        ENTHALPY=`  echo -e "$TEST" | grep "Thermal correction to Enthalpy=" | awk '{print $5}'`
        GIBBS=`    echo  -e "$TEST" | grep "Thermal correction to Gibbs Free Energy=" | awk '{print $7}'`

        ### Grotvib neglects the translational contribution to entropy

  #      unset S_tot Strans Srotvib
   #     S_tot=$(echo "$TEST" | grep "Total" | awk '{print $NF}')
    #    Strans=$(echo "$TEST" | grep "Translational" | awk '{print $NF}')
     #   Srotvib=$(echo $S_tot-$Strans | bc -l)
      #  Grotvib=$(echo "($ENTHALPY-(298.15*(($Srotvib)/(1000*627.5095))))" | sed 's/--/+/' | bc -l | xargs printf "%.*f\n" 6)

        # version discarded to enhance readability
#       RAW=`grep -A 8 "Zero-point correction=" $FILEPATH| awk 'NF>1{print $NF}'`
#       RAWARRAY=($RAW)
#
#       ENERG_THERM=${RAWARRAY[1]}
#       ENTHALPY=${RAWARRAY[2]}
#       GIBBS=${RAWARRAY[3]}
        fi
fi


if [ $PROGNAME = "ORCA" ]
then
TEST1=`grep -c "Analytical frequency calculation" $FILEPATH `
TEST2=`grep -c "ORCA NUMERICAL FREQUENCIES" $FILEPATH `
        if [ "$TEST1" != "0" ] || [ "$TEST2" != "0" ]
        then

        thermoline=$(tac $FILEPATH | grep -n -i -m1 "thermochemistry" | cut -f1 -d':')
        THERMOSECTION=$(tac $FILEPATH | sed -n 1,"$thermoline"p | tac)

                # the Following Correctiosn can be found directly in the output. analogous to the Corrections found in Gaussian outputs
        ZPVE=$(echo "$THERMOSECTION" | grep "Zero point energy" | awk '{print $5}')
        ENERG_THERM=$(echo "$THERMOSECTION" | grep "Total correction" | awk '{print $3}')
        GIBBS=$(echo "$THERMOSECTION" | grep "G-E(el)" | awk '{print $3}')
		
		PointGroup=$(echo "$THERMOSECTION" | grep -m1 "Point Group" | awk '{print $3}' | cut -f1 -d',')
		SymmetryNumber=$(echo "$THERMOSECTION" | grep -m1 "Symmetry Number" | awk '{print $NF}')
		TEMPERATURE=$(echo "$THERMOSECTION" | grep -m1 "Temperature" | awk '{print $3}') # in K
		Strans=$(echo "$THERMOSECTION" | grep -m1 "Translational entropy" | awk '{print $4}')	# in a.u.
		Strans=$(echo "$Strans*(627509.5/$TEMPERATURE)" | bc -l | xargs printf "%.*f\n" 3)	# in cal/mol*K
		Srot=$(echo "$THERMOSECTION" | grep "Rotational entropy" | tail -1 | awk '{print $4}')	# in a.u.
		Srot=$(echo "$Srot*(627509.5/$TEMPERATURE)" | bc -l | xargs printf "%.*f\n" 3)	# in cal/mol*K
		Svib=$(echo "$THERMOSECTION" | grep "Vibrational entropy" | tail -1 | awk '{print $4}')	# in a.u.
		Svib=$(echo "$Svib*(627509.5/$TEMPERATURE)" | bc -l | xargs printf "%.*f\n" 3)	# in cal/mol*K
		
	    # ORCA adds up the coorections subsequently to on another.
        # The "Thermal Enthalpy correction" has to be addet to the "Total correction"  (ZPVE + thermal correction)
        # to yield the same correction as stated by gaussian (based on Electronic energy )
        #[ORCA gives the enthalpy correction based on the Total free energy]
        TOTALCORRECTION=$(echo "$THERMOSECTION" | grep "Total correction" | awk '{print $3}')
        ENTHALPYCORRECTION=$(echo "$THERMOSECTION" | grep "Thermal Enthalpy correction" | awk '{print $5}')
        ENTHALPY=$(echo $TOTALCORRECTION+$ENTHALPYCORRECTION | bc -l)
        TEST=$(echo $ENTHALPY | cut -c1)
        if [ $TEST = "." ]; then ENTHALPY=$(echo 0"$ENTHALPY"); fi

        fi
fi


}


function find_Nimag {

if [ $PROGNAME = "Gaussian" ]
then
        TEST=`grep -i -m 1 "Frequencies" $FILEPATH`
        #TEST=`grep -i -m 1 "imaginary frequencies (negative Signs" $FILEPATH`
        if [ -z "$TEST" ]
        then
                IMAG="-"
        else
                IMAG=`grep -i -m 1 "imaginary frequencies (negative Signs" $FILEPATH | awk '{print $2}'`
                if [[ -z $IMAG ]] ; then IMAG=0 ; fi
        fi
fi

if [ $PROGNAME = "ORCA" ]
then
        TEST=`grep -i -m 1 "FREQUENCIES" $FILEPATH`
        if [ -z "$TEST" ]; then
                IMAG="-"
        else
                freqline=$(tac $FILEPATH | grep -n -i -m1 "FREQUENCIES" | cut -f1 -d':')
                FREQSECTION=$(tac $FILEPATH | sed -n 1,"$freqline"p | tac)
                IMAG=$(echo "$FREQSECTION" | grep -c  "imaginary mode")
        fi
fi


}

function find_NTerm {

case "$PROGNAME" in
        Gaussian)
        NTERM=`grep -c "Normal termination of Gaussian" $FILEPATH`
        ;;
        ORCA)
        NTERM=`grep -c "ORCA TERMINATED NORMALLY" $FILEPATH`
#<<<<<<< HEAD
#fi

#=======
        ;;
        xTB)
        NTERM=`grep -c "finished run"  $FILEPATH `
        ;;
        crest)
        NTERM=`grep -c " CREST terminated normally." $FILEPATH`
        NUMOFCONFORMERS=`grep "number of unique conformers for further calc" $FILEPATH | awk '{print $8}'`
        NOTES+="confs_found:$NUMOFCONFORMERS"
        ;;
esac
#>>>>>>> 2febef4b09fdb6c773c59d46f633fe286336320b

}

function find_charge {

if [ $PROGNAME = "Gaussian" ]
        then
        CHARGE=`grep -m 1 "Charge =" $FILEPATH | awk '{print $3}'`
        MULITPL=`grep -m 1 "Charge =" $FILEPATH | awk '{print $6}'`

fi

if [ $PROGNAME = "ORCA" ]
        then
        CHARGE=`grep -m 1 "Total Charge" $FILEPATH | awk '{print $NF}'`
        MULITPL=`grep -m 1 "Multiplicity" $FILEPATH | awk '{print $NF}'`
fi
}

function find_version {

case "$PROGNAME" in
        Gaussina)
        RAW=`grep -m 1 -A 2 "Cite this work as:" $FILEPATH`
        PROG=`echo $RAW | awk '{print $5 $6}' | sed 's/,//g'`
        REV=`echo $RAW | awk '{print $8}' | sed 's/,//g'`
        ;;
        ORCA)
        RAW=`grep "Program Version" $FILEPATH`
        REV=`echo $RAW | awk '{print $3}'`
        PROG_RAW=`echo $REV | sed 's@\.@ @g' | awk '{print $1}'`
        PROG=`echo " $PROGNAME $PROG_RAW "`
        ;;
        xTB)
        PROG=`grep " xtb version" $FILEPATH  | awk '{print "xTB " $4}'`
        ;;
        crest)
        PROG=`grep "Version" $FILEPATH  | awk '{print "crest" $2}'`
        ;;
esac


}

function find_runtime {

case "$PROGNAME" in
        Gaussian)
        TEMP=`tail -n 7 $FILEPATH `
        RUNTIME=`echo "$TEMP" | grep "Elapsed time" | awk '{print $3":"$5":"$7":" $9}'`

        NT=`echo "$TEMP" | grep -c "Normal termination of Gaussian" `
        ET=`echo "$TEMP" | grep -c "Error termination request processed"`

        if [ "$NT" = "1" ]
                then
                JOBSTATE="F-NT"
                elif [ "$ET" = "1" ]
                then
                JOBSTATE="F-ET"
                NOTES+="Error_termination"
                else
                JOBSTATE="unknown"
                NOTES+="Job_running_or_crashed"
        fi
        ;;
        ORCA)
        TEMP=`tail -n 7 $FILEPATH `
        RUNTIME=`echo "$TEMP" | grep "TOTAL RUN TIME:" | awk '{print $4 ":" $6 ":" $8 ":" $10 "." $12}'`

        NT=`echo "$TEMP" | grep -c "ORCA TERMINATED NORMALLY" `
        #ET=`echo "$TEMP" | grep -c "Error termination request processed"`
        #had no examples at hand: inserted for later fix
        if [ "$NT" = "1" ]
                then
                JOBSTATE="F-NT"
                elif [ "$ET" = "1" ]
                then
                JOBSTATE="F-ET"
                NOTES+="Error_termination"
                else
                JOBSTATE="unknown"
                NOTES+="Job_running_or_crashed"
        fi
        ;;
        xTB)
        RUNTIME=`grep -m 1 " wall-time:" $FILEPATH | awk '{print $3 ":" $5 ":" $7 ":" $9 }'`
        ;;
        crest)
        RUNTIME=`grep "Overall wall time" $FILEPATH | awk '{print $4 $5 $6}'`
        ;;

esac
}

function find_Nimag_string { # MIN or TS or higher-order saddlepoint (HOS)

find_Nimag
unset IMAGSTRING
case $IMAG in 
	-)	IMAGSTRING=$IMAG
	;;
	0) IMAGSTRING=MIN
	;;
	1) IMAGSTRING=TS
	;;
	*) if [[ $IMAG =~ ^-?[0-9]+$ ]] ; then IMAGSTRING=HOS; else IMAGSTRING=ERROR ; fi
	;;
esac

}

function reset_vars { # set all variables to NA to resolve issues in console output
NA="-"

METH="$NA"
BASIS="$NA"
ENERG_EL="$NA"
ZPVE="$NA"
ENERG_THERM="$NA"
ENTHALPY="$NA"
GIBBS="$NA"
IMAG="$NA"
NTERM="$NA"
PROG="$NA"
REV="$NA"
RUNTIME="$NA"
NTERM="$NA"
IMAG="$NA"
Gsolv="$NA"
SOLVENT="$NA"
Grotvib="$NA"
NUMOFCONFORMERS="$NA"
TEMPERATURE="$NA"
Strans="$NA"
Srot="$NA"
Svib="$NA"
PointGroup="$NA"
SymmetryNumber="$NA"
}

######################################################
#           FUNCTIONS END
######################################################

######################################################
#           OPTIONAL ARGUMENTS
######################################################

while getopts ":hf:" OPTION; do      # read variables
  case $OPTION in
    h)
        echo "Help-File does not exist. Ask me."
        exit
        ;;
  #      d)
   #     CSVDELIM=$OPTARG
    #    ;;
#        s)
 #       DECISEP=$OPTARG
  #      ;;
 #       c)
  #      DEPTH=1
   #     echo "... searching in only the current folder"
    #    ;;
     #   n)
      #  DEPTH=$OPTARG; echo "... searching in this and $DEPTH subfolder(s)"; DEPTH=$((DEPTH+1))
       # ;;
 #       v)
  #      VERBOSITY=$OPTARG # either 1,2,3,... (default: 0)
   #     ;;
#        i)
 #       SI_vers=$OPTARG
  #      ;;
        f)
        VARFILE=$OPTARG
        ;;
    \?)
        prnt_error
    echo "Invalid option: -$OPTARG" >&2
        exit
    ;;
  esac
done

#############################################################


#DEFINE OUTPUT-FILES IN THE CURRENT DIRECTORY
 case $VARFILE in
         all)
               #         if [ -z $DEPTH ]; then DEPTH=1000; echo "... searching in all subfolders"; fi
           #             if [ "$VERBOSITY" -ne 2 ]; then
            #                    LIST=`find -maxdepth $DEPTH ! -name 'slurm*.out' -name "*.out"`
             #           else
              #                  LIST=`find -maxdepth $DEPTH \( -name "*.out" ! -name "slurm*.out" ! -name "*_SMD_*.out" ! -name "*_SP.out" \)`
               #         fi
						LIST=`find -maxdepth $DEPTH \( -name "*.out" ! -name "slurm*.out" ! -name "*_SMD_*.out" \)`
				#		LIST=`find -maxdepth $DEPTH ! -name 'slurm*.out' -name "*.out"`
                        LISTARR=($LIST)
						SMDLIST=($(find -maxdepth $DEPTH \( -name "*_SMD_*.out" \) | cut -f2 -d'/'))
         ;;
         *)
         echo "... search for file: "$VARFILE""
         LIST=`find -maxdepth 1 ! -name 'slurm*.out' -name "$VARFILE"`
         LISTARR=($LIST)
         ;;
 esac
echo "Requested ${#LISTARR[@]} OUT-Files and ${#SMDLIST[@]} SMD-Files"

######################################################
# initialisation of the *.csv files

#echo "summary" > $CSVFILEFILEPATH #
#echo "user;$USERFILEPATH" >> $CSVFILEFILEPATH
#echo "directory;$DIR" >> $CSVFILEFILEPATH
#echo "host;$HOST" >> $CSVFILEFILEPATH
#echo "host IP;$HOSTIP" >> $CSVFILEFILEPATH
#echo "Hartree in kcal/mol;627.5095; REF: 10.1103/RevModPhys.84.1527 10.1063/1.4724320 10.1351/pac197951010001" >> $CSVFILEFILEPATH
#echo " " >> $CSVFILEFILEPATH

######################################################

echo "Begin to collect all the energies and so on ..."
count=0
if [[ -f $TEMPDATA ]]; then rm $TEMPDATA; fi 
for FILEPATH in "${LISTARR[@]}" ; do
	((count+=1))
	echo "Collecting data $count/${#LISTARR[@]}"
	NOTES=""
	reset_vars

	# gathering Informations

	################ CALLING FUNCTIONS

	ident_prog
	format_strings
	find_methode
	find_energ
	find_ther_corr
	find_Nimag_string
	find_version
	echo "$FILENAME;$PointGroup;$IMAGSTRING;$ENERG_EL;$ZPVE;$ENTHALPY;$GIBBS;$Strans;$Srot;$Svib;$TEMPERATURE;$METHBASIS" >> $TEMPDATA
#	TABLEHEAD="File;Stationary Point;E(el);ZPVE;H_corr;G_corr;Level of Theory;G_solv;Solvent"
	TABLEHEAD="File;PG;Stationary Point;E(el);ZPVE;H_corr;G_corr;S_trans;S_rot;S_vib;Temp;Level of Theory;G_solv;Solvent"
	index_FILENAME=1
	index_PointGroup=2
	index_IMAGSTRING=3
	index_ENERG_EL=4
	index_ZPVE=5
	index_ENTHALPY=6
	index_GIBBS=7
	index_Strans=8
	index_Srot=9
	index_Svib=10
	index_TEMPERATURE=11
	index_METHBASIS=12
	index_Gsolv=13
	index_solvent=14

	#verbosity 2
	#echo "$FULLPATH;$FILENAME;$ENERG_EL;$ENTHALPY;$GIBBS;$Grotvib;$Gsolv;$SOLVENT;$IMAGSTRING;$LEVEL;$NOTES" >> $CSVFILEFILEPATH
	#else
	#echo "$FULLPATH;$FILENAME;$METH;$BASIS;$ENERG_EL;$ZPVE;$ENERG_THERM;$ENTHALPY;$GIBBS;$Grotvib;$IMAG;$NTERM;$PROG;$REV;$RUNTIME;$NOTES" >> $CSVFILEFILEPATH

done
echo "Collection Done"
#echo "Got the raw data: $TEMPDATA"
#cat $TEMPDATA
#echo "Begin manipulation of $TEMPDATA"


############# MERGE SPE AND SMD TO OPTFREQ
## to do: work on issues if multiple SPE or SMD computations are present! check intereferences
echo "Begin to merge SPE and SMD data with MIN/TS data ..."
if [[ -f $MERGEAPPENDIX ]] ; then rm $MERGEAPPENDIX ; fi 
unset OPTFREQARR
count=0
countSPE=0
countSMD=0
OPTFREQARR=($(cat $TEMPDATA | grep -E "TS|MIN" | cut -f"$index_FILENAME" -d';')) ### contains all $FILENAME for files which are TS or MIN according to $IMAGSTRING
for (( i=0 ; i < ${#OPTFREQARR[@]} ; i++ )) ; do
	((count+=1))
	echo "Merging... $count/${#OPTFREQARR[@]}"
#	unset linespe
	unset check linenumspe linespe linenumoptfreq lineoptfreq energyspe leveloptfreq levelspe mergedlevel SMDmatch SMDresults G_solv_au G_solv_kcal SOLVENT matchoptfreq matchspe
	#check=($(cat $TEMPDATA | cut -f"$index_FILENAME" -d';' | grep -n -E "^(spe|SPE)+((-|_)?[[:alnum:]](-|_)?)*${OPTFREQARR[$i]}\$" | cut -f1 -d':' | sort -n -r))
	check=($(cat $TEMPDATA | cut -f"$index_FILENAME" -d';' | grep -n -E "^${file2/.out}(-|_)+(spe|SPE)+((-|_)?[[:alnum:]](-|_)?)*.out\$" | cut -f1 -d':' | sort -n -r))
	if ! [[ -z ${check[@]} ]]; then #### matching SPE-computation to OPTFREQ computation, preparing VARIABLES
		for linenumspe in ${check[@]}; do 	#linenumber of TEMPDATA containing SPE data
			linespe=$(sed -n "$linenumspe"p $TEMPDATA)	#line itself of TEMPDATA containing SPE data
			linenumoptfreq=$(cat $TEMPDATA | cut -f"$index_FILENAME" -d';' | grep -n -E "^${OPTFREQARR[$i]}\$" | cut -f1 -d':')	#linenumber of TEMPDATA containing OPTFREQ data
			lineoptfreq=$(sed -n "$linenumoptfreq"p $TEMPDATA)	#line itself of TEMPDATA containing OPTFREQ data
		#	echo "Merge line $linenumspe with $linenumoptfreq"
			energyspe=$(echo $linespe | cut -f"$index_ENERG_EL" -d';')
			leveloptfreq=$(echo $lineoptfreq | cut -f"$index_METHBASIS" -d';')
			levelspe=$(echo $linespe | cut -f"$index_METHBASIS" -d';')
			mergedlevel=$levelspe//$leveloptfreq
			matchoptfreq=$(echo $lineoptfreq | cut -f1 -d';')
			matchspe=$(echo $linespe | cut -f1 -d';')
			echo "Matching SPE: $matchspe and $matchoptfreq" >> $MERGEAPPENDIX
			((countSPE+=1))
			
			if [[ ! -z $energyspe && ! -z $mergedlevel && ! -z $linenumoptfreq ]] ; then #### merging SPE and OPTFREQ data
				sed -n "$linenumoptfreq"p $TEMPDATA | awk -F';' -vOFS=';' -v energyreplace=$energyspe -v levelreplace=$mergedlevel -v indexE=$index_ENERG_EL -v indexLEVEL=$index_METHBASIS '{$indexE=energyreplace}{$indexLEVEL=levelreplace}1;' >> $TEMPDATA2
		#		sed -n "$linenumoptfreq"p $TEMPDATA | awk -F';' -vOFS=';' -v energyreplace=$energyspe -v levelreplace=$mergedlevel -v indexE=$index_ENERG_EL -v indexLEVEL=$index_METHBASIS '{$indexE=energyreplace}{$indexLEVEL=levelreplace}1;' >> $TEMPDATA
			fi	
		done
		for linenumspe in ${check[@]}; do sed -i "$linenumspe"d $TEMPDATA ; done
		cat $TEMPDATA2 >> $TEMPDATA
		rm $TEMPDATA2
	fi

	SMDmatch=($(echo ${SMDLIST[@]} | sed -s "s/ /\n/g" | rev | cut -f3-100 -d'_'  | rev | grep -n -E "^${OPTFREQARR[$i]/.out}\$" | cut -f1 -d':'))
	for index in ${SMDmatch[@]}; do
		if [[ $index =~ ^[0-9]+$ ]]; then ### matching SMD-computation to OPTFREQ copmutation, preparing VARIABLES
			index=$((index-1))
			SMDresults=$(doSMD ${SMDLIST[$index]} -c -b) ### EXTERNAL SCRIPT #####
			G_solv_au=$(echo $SMDresults | awk '{print $1}') ##includes standard state correction
			G_solv_kcal=$(echo $G_solv_au*627.5095 | bc -l | xargs printf "%.*f\n" 2) ##includes standard state correction
			SOLVENT=$(echo $SMDresults | awk '{print $2}')
			
	#		TEMPERATURE=$(sed -n "$linenumoptfreq"p $TEMPDATA | cut -f"$index_TEMPERATURE" -d';')
	#		calcEntropySolv ${OPTFREQARR[$i]} -s $SOLVENT -T $TEMPERATURE > $TEMPDATA2 ### EXTERNAL SCRIPT #####
	#		Stransdiff=$(tac $TEMPDATA2 | grep -m1 "S_trans_diff" | awk '{print $NF}')
	#		Stranssoln=$(tac $TEMPDATA2 | grep -m1 "S_trans" | awk '{print $NF}')
	#		Srotdiff=$(tac $TEMPDATA2 | grep -m1 "S_rot_diff" | awk '{print $NF}')
	#		Srotsoln=$(tac $TEMPDATA2 | grep -m1 "S_rot" | awk '{print $NF}')
	#		Svibsoln=$(tac $TEMPDATA2 | grep -m1 "S_vib" | awk '{print $NF}')
	#		Scav=$(tac $TEMPDATA2 | grep -m1 "S_cav" | awk '{print $NF}')
	#		Sconc=$(tac $TEMPDATA2 | grep -m1 "S_conc" | awk '{print $NF}')
	#		Ssolv=$(tac $TEMPDATA2 | grep -m1 "S_solv" | awk '{print $NF}')
	#		Ssolv=$(tac $TEMPDATA2 | grep -m1 "S_soln" | awk '{print $NF}')
			
			echo "Matching SMD: ${SMDLIST[$index]} and ${OPTFREQARR[$i]}" >> $MERGEAPPENDIX
			((countSMD+=1))
			linenumoptfreq=($(cat $TEMPDATA | cut -f"$index_FILENAME" -d';' | grep -n -E "^${OPTFREQARR[$i]}\$" | cut -f1 -d':'))
			#echo "bugfix: found SMD matches in ${linenumoptfreq[@]} for ${OPTFREQARR[$i]}"
			for k in ${linenumoptfreq[@]} ; do
			#	echo "bugfix: run $k"
				if [[ ! -z $G_solv_kcal && ! -z $SOLVENT ]]; then ## appending SMD-data to OPTFREQ-data
					sed -i ""$k"s/$/;"$G_solv_kcal";"$SOLVENT"/" $TEMPDATA
				fi
			done
		fi
	done
	#rm $TEMPDATA2
done


numcolumns=($(cat $TEMPDATA | awk -F';' '{print NF}' | sed -s "s/ /\n/g"))
#removeline=-1
for (( i=0 ; i < ${#numcolumns[@]} ; i++ )) ; do
	linenum=$((i+1))
	line=$(sed -n "$linenum"p $TEMPDATA)
	echo "$line" | cut -f"$index_FILENAME"-"$index_solvent" -d';' >> $TEMPDATA2
	while [[ "${numcolumns[$i]}" -gt "$index_solvent" ]]; do
		helpvar=$(echo ""${numcolumns[$i]}"-1" | bc -l)
		echo "$line" | cut -f"$index_FILENAME"-"$index_METHBASIS","$helpvar"-"${numcolumns[$i]}" -d';' >> $TEMPDATA2
		numcolumns[$i]=$(echo ""${numcolumns[$i]}"-2" | bc -l)
	done
done

echo "Merging Done"

#rm $TEMPDATA2
#	cat $TEMPDATA

##################### GENERATE OUTPUT
echo "$TABLEHEAD" > $CSVFILEFILEPATH
cat $TEMPDATA2 >> $CSVFILEFILEPATH
rm $TEMPDATA $TEMPDATA2
echo "Find energies for PES here: $CSVFILEFILEPATH"
echo "Find info about merged files here (SPE/SMD:$countSPE/$countSMD): $MERGEAPPENDIX"

######## CONSOLE OUTPUT
#TABLEHEAD="File;Stationary Point;E(el);ZPVE;H_corr;G_corr;Level of Theory;G_solv;Solvent"

#echo         "      FILENAME                | M/T |    E(el)   | H_corr | G_corr | G_solv |   Solvent    |  Level   "
 #       echo "------------------------------+-----+------------+--------+--------+--------+--------------+--------- "
        #     open-sMe-gemdimethyl_conf1    | MIN | -1234.0001 | 0.0001 | 0.0001 | -100.0 |   Benzene    | OPTFREQ               





