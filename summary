#!/bin/bash
#
# create summarys of your computations 
#
# script is not fully tested. Use at your own risk
# please report any bugs and suggestions via mail or during cigarette breaks
#

# define variables
VERSION="0.2" # basic ORCA implementation done
USERFILEPATH=`whoami`
DIR=`pwd`
HOST=`ident_host | awk '{print $1}'`
HOSTIP=`ident_host | awk '{print $2}'`
#default settings: these may be changed by some arguments
CSVFILEFILEPATH="summary.csv"
CSVFILEFILEPATH_BKUP="summary_bkup.csv"
CSVDELIM=";"
DECISEP="."
SCRIPTDIR=`dirname $(readlink -f ${0})`
MAXFILES=25 # maximal files summary will read without extra user input
#DEPTH=all #depth of search -1=all 0=current n=n subfolders
VERBOSITY=0 # verbosity of the output on terminal
SI_vers=0 # which kind of SI file is written ( Default: 0 = none )
VARFILE=all # given output-file for analysis ( Default: all ) 
unset DEPTH #depth of search, =all subfolders by default 

######################################################
#            Functions for reading various stuff

function prnt_error {
echo -e  "\033[0;31m ERROR ! stopping script \033[0m "
}

function prnt_warning {
echo -e "\033[1;33m WARNING ! \033[0m "
}

function prnt_ok {
echo -e -n "\033[0;32m OK: \033[0m "
}


function format_strings { # formats stuff like the full path to the file, the dir in which the file is stored and the filename
FILENAME=`echo " $FILEPATH" | sed -e 's@\/@ @g' | awk '{print $NF}'`
FILENAMFORMATTED=`echo "$FILENAME" | cut -c -24 `
FILEPATHFORMATTED=`echo "$FILEPATH" | rev | cut -c -24 | rev`
FULLPATH=$FILEPATH 
}

function ident_prog { # identify the programm (gaussian, orca, ...) that created this OUT file
#orca:
FILEHEAD=`head -3 $FILEPATH `
IDENTORCA=`echo "$FILEHEAD"| grep -c "        * O   R   C   A *"`
IDENTGAUSSIAN=`echo "$FILEHEAD"| grep -c " Entering Gaussian System, Link 0"`

PROGID=0
PROGNAME="none"

if [ "$IDENTORCA" = "0" ] & [ "$IDENTGAUSSIAN" = "1" ]
	then
	PROGNAME="Gaussian"
fi 

if [ "$IDENTORCA" = "1" ] & [ "$IDENTGAUSSIAN" = "0" ]
	then
	PROGNAME="ORCA"
fi
}

function find_methode { # gives the used Method
if [ $PROGNAME = "Gaussian" ]
then
	TEST=`grep -m 1 "GINC-" $FILEPATH `
	if [ -n "$TEST" ]
	then
		RAW=`grep -m 1 "GINC-" $FILEPATH | sed -e 's.\\\. .g'`
		METH=` echo $RAW | awk '{print $5}'`
		BASIS=`echo $RAW | awk '{print $6}'`
	fi

#### search for additive Dispersion correction considering GD2, GD3, GD3BJ
	unset DISPCORR
	for DISPKEY in GD2 GD3; do
		if grep -i -q "empiricaldispersion=$DISPKEY" $FILEPATH; then
			DISPCORR=$DISPKEY
		fi
	done
	
	case $DISPCORR in 
		GD2) METH=$METH'-D2'
		;;
		GD3)	if grep -i -q "empiricaldispersion=GD3BJ" $FILEPATH; then
					METH=$METH'-D3(BJ)'
				else
					METH=$METH'-D3'
				fi
		;;
	esac
fi


if [ $PROGNAME = "ORCA" ]
then
RAW=`grep "| " $FILEPATH  | grep "!"`
METH=` echo $RAW | awk '{print $4}'`
BASIS=`grep "Your calculation utilizes the basis:" $FILEPATH | awk '{print $NF}'`
#BASIS=`echo $RAW | awk '{print $5}'`
fi
}

function find_coords {



NATOMS=`grep -m 1 "NAtoms=" $FILEPATH | awk '{print $2}' | sed -e 's/ //g'`

COORDS_RAW=`grep -i -A $NATOMS "Redundant internal coordinates found in file." $FILEPATH ` #read the coordinates used for the frequency computation

COORDS=`echo "$COORDS_RAW" | sed -e 1d | sed -e 's/,0,/,/g' | sed -e 's/ //g '  | sed -e 's/,/ /g' ` # some nice formatting

COORDS_new=`printf '%-3s\t%-14s\t%-14s\t%-14s\n' $COORDS`

#| sed -e 's/,-/    -/g' | sed -e 's/,/     /g' | sed -e "1ipufferzeile" | sed -e "1i$NATOMS" | sed -e 's/pufferzeile//g'
}

function find_energ { 

if [ $PROGNAME = "Gaussian" ] 
then
TEST=`grep -m 1 -c "SCF Done:  " $FILEPATH`
	if [ "$TEST" != 0 ]
	then
	ENERG_EL=`tac $FILEPATH | grep -m 1 "SCF Done:  " | awk '{print $5}'`
	fi
fi

if [ $PROGNAME = "ORCA" ]
then
TEST=`grep -m 1 -c "FINAL SINGLE POINT ENERGY" $FILEPATH`
	if [ "$TEST" != 0 ]
	then
	ENERG_EL=`tac $FILEPATH | grep -m 1 "FINAL SINGLE POINT ENERGY" | awk '{print $5}'`
	fi
#	ENERG_EL=`tac $FILEPATH | grep -m 1 "FINAL SINGLE POINT ENERGY"  | awk '{print $5}'`
fi

}

function find_ther_corr { # finds the themal corrections to electronic Energy
 
if [ $PROGNAME = "Gaussian" ]
then
TEST=`grep -c -i "Zero-point correction=" $FILEPATH `
	if [ "$TEST" != "0" ]
	then
	
	TEST=`grep -m 1 -A 15 "Zero-point correction=" $FILEPATH`
	
	ZPVE=`       echo -e "$TEST"| grep "Zero-point correction=" | awk '{print $3}'`	
	ENERG_THERM=`echo -e "$TEST"| grep "Thermal correction to Energy=" | awk '{print $5}'`
	ENTHALPY=`  echo -e "$TEST" | grep "Thermal correction to Enthalpy=" | awk '{print $5}'`
	GIBBS=`    echo  -e "$TEST" | grep "Thermal correction to Gibbs Free Energy=" | awk '{print $7}'`
	
	### Grotvib neglects the translational contribution to entropy

	unset S_tot S_trans S_rotvib
	S_tot=$(echo "$TEST" | grep "Total" | awk '{print $NF}')
	S_trans=$(echo "$TEST" | grep "Translational" | awk '{print $NF}')
	S_rotvib=$(echo $S_tot-$S_trans | bc -l)
	Grotvib=$(echo "($ENTHALPY-(298.15*(($S_rotvib)/(1000*627.5095))))" | sed 's/--/+/' | bc -l | xargs printf "%.*f\n" 6)
	
	# version discarded to enhance readability
#	RAW=`grep -A 8 "Zero-point correction=" $FILEPATH| awk 'NF>1{print $NF}'`
#	RAWARRAY=($RAW)
# 
#	ENERG_THERM=${RAWARRAY[1]}
#	ENTHALPY=${RAWARRAY[2]}
#	GIBBS=${RAWARRAY[3]}
	fi
fi


if [ $PROGNAME = "ORCA" ]
then
TEST1=`grep -c "Analytical frequency calculation" $FILEPATH `
TEST2=`grep -c "ORCA NUMERICAL FREQUENCIES" $FILEPATH `
	if [ "$TEST1" != "0" ] || [ "$TEST2" != "0" ]
	then
	
	thermoline=$(tac $FILEPATH | grep -n -i -m1 "thermochemistry" | cut -f1 -d':')
	THERMOSECTION=$(tac $FILEPATH | sed -n 1,"$thermoline"p | tac)
	
		# the Following Correctiosn can be found directly in the output. analogous to the Corrections found in Gaussian outputs
	ZPVE=$(echo "$THERMOSECTION" | grep "Zero point energy" | awk '{print $5}')
	ENERG_THERM=$(echo "$THERMOSECTION" | grep "Total correction" | awk '{print $3}')
	GIBBS=$(echo "$THERMOSECTION" | grep "G-E(el)" | awk '{print $3}')
	
	# ORCA adds up the coorections subsequently to on another.
	# The "Thermal Enthalpy correction" has to be addet to the "Total correction"  (ZPVE + thermal correction)
	# to yield the same correction as stated by gaussian (based on Electronic energy )
	#[ORCA gives the enthalpy correction based on the Total free energy]
	TOTALCORRECTION=$(echo "$THERMOSECTION" | grep "Total correction" | awk '{print $3}')
	ENTHALPYCORRECTION=$(echo "$THERMOSECTION" | grep "Thermal Enthalpy correction" | awk '{print $5}')
	ENTHALPY=$(echo $TOTALCORRECTION+$ENTHALPYCORRECTION | bc -l)
	TEST=$(echo $ENTHALPY | cut -c1)
	if [ $TEST = "." ]; then ENTHALPY=$(echo 0"$ENTHALPY"); fi

	fi
fi


}

function find_Nimag {

if [ $PROGNAME = "Gaussian" ]
then
TEST=`grep -i -m 1 "imaginary frequencies (negative Signs" $FILEPATH`
	if [ -z "$TEST" ]
	then 
	IMAG="0"
	else 
	IMAG=`grep -i -m 1 "imaginary frequencies (negative Signs" $FILEPATH | awk '{print $2}'`
	fi
fi

if [ $PROGNAME = "ORCA" ]
then

	freqline=$(tac $FILEPATH | grep -n -i -m1 "FREQUENCIES" | cut -f1 -d':')
	FREQSECTION=$(tac $FILEPATH | sed -n 1,"$freqline"p | tac)
	IMAG=$(echo "$FREQSECTION" | grep -c  "imaginary mode")

fi


}

function find_NTerm {

if [ $PROGNAME = "Gaussian" ]
then
	NTERM=`grep -c "Normal termination of Gaussian" $FILEPATH`
fi

if [ $PROGNAME = "ORCA" ]
	then
	NTERM=`grep -c "ORCA TERMINATED NORMALLY" $FILEPATH`
fi



}

function find_charge {

if [ $PROGNAME = "Gaussian" ] 
	then
	CHARGE=`grep -m 1 "Charge =" $FILEPATH | awk '{print $3}'`
	MULITPL=`grep -m 1 "Charge =" $FILEPATH | awk '{print $6}'`

fi

if [ $PROGNAME = "ORCA" ]
	then
	CHARGE=`grep -m 1 "Total Charge" $FILEPATH | awk '{print $5}'`
	MULITPL=`grep -m 1 "Multiplicity" $FILEPATH | awk '{print $5}'`
fi




}

function find_version {

if [ $PROGNAME = "Gaussian" ]
then
	RAW=`grep -m 1 -A 2 "Cite this work as:" $FILEPATH`
	PROG=`echo $RAW | awk '{print $5 $6}' | sed 's/,//g'`
	REV=`echo $RAW | awk '{print $8}' | sed 's/,//g'`
fi

if [ $PROGNAME = "ORCA" ]
then
	RAW=`grep "Program Version" $FILEPATH`
	REV=`echo $RAW | awk '{print $3}'`
	PROG_RAW=`echo $REV | sed 's@\.@ @g' | awk '{print $1}'`
	PROG=`echo " $PROGNAME $PROG_RAW "`
	
fi


}

function find_runtime {

if [ "$PROGNAME" = "Gaussian" ]
	then
	TEMP=`tail -n 7 $FILEPATH `
	RUNTIME=`echo "$TEMP" | grep "Elapsed time" | awk '{print $3":"$5":"$7":" $9}'`
	
	NT=`echo "$TEMP" | grep -c "Normal termination of Gaussian" `
	ET=`echo "$TEMP" | grep -c "Error termination request processed"`
	
	if [ "$NT" = "1" ]
		then
		JOBSTATE="F-NT"
		elif [ "$ET" = "1" ]
		then
		JOBSTATE="F-ET"
		NOTES+="Error_termination"
		else
		JOBSTATE="unknown"
		NOTES+="Job_running_or_crashed"
	fi
	
fi

if [ $PROGNAME = "ORCA" ]
then
	TEMP=`tail -n 7 $FILEPATH `
	RUNTIME=`echo "$TEMP" | grep "TOTAL RUN TIME:" | awk '{print $4 ":" $6 ":" $8 ":" $10 "." $12}'`

	NT=`echo "$TEMP" | grep -c "ORCA TERMINATED NORMALLY" `
	#ET=`echo "$TEMP" | grep -c "Error termination request processed"`
	#had no examples at hand: inserted for later fix
	if [ "$NT" = "1" ]
		then
		JOBSTATE="F-NT"
		elif [ "$ET" = "1" ]
		then
		JOBSTATE="F-ET"
		NOTES+="Error_termination"
		else
		JOBSTATE="unknown"
		NOTES+="Job_running_or_crashed"
	fi
fi

}

function find_Nimag_string { # MIN (if NT=2 & IMAG=0), TS (if NT=2 & IMAG=1), or ERROR 

find_Nimag
find_NTerm

unset IMAGSTRING	
if [ "$NTERM" -eq 2 ] & [ "$IMAG" -eq 0 ]; then IMAGSTRING='MIN'; fi
if [ "$NTERM" -eq 2 ] & [ "$IMAG" -eq 1 ]; then IMAGSTRING='TS'; fi
if [ -z "$IMAGSTRING" ]; then IMAGSTRING='ERROR'; fi

}

function reset_vars { # set all variables to NA to resolve issues in console output 
NA="-"

METH="$NA" 
BASIS="$NA" 
ENERG_EL="$NA" 
ZPVE="$NA" 
ENERG_THERM="$NA" 
ENTHALPY="$NA" 
GIBBS="$NA" 
IMAG="$NA" 
NTERM="$NA" 
PROG="$NA" 
REV="$NA" 
RUNTIME="$NA" 
NTERM="$NA" 
IMAG="$NA"
Gsolv="$NA"
SOLVENT="$NA"
Grotvib="$NA"
}

function merge_data {
		unset LEVEL NOTES ORCAFILEPATH STOREFILEPATH SMDFILEPATH NUMSMD SMDOUTPUT SOLVENT Gsolv
		LEVEL="$METH"/"$BASIS"
		NOTES=$(echo "$PROG $REV")
		
		ORCAFILEPATH=$(echo $FILEPATH | rev | cut -f2-10 -d'.' | rev); ORCAFILEPATH="$ORCAFILEPATH"_SP.out
		if [ -f "$ORCAFILEPATH" ]; then 
			STOREFILEPATH=$FILEPATH
			FILEPATH=$ORCAFILEPATH
			ident_prog
			find_NTerm
			if [ "$NTERM" -eq 1 ] && [ "$PROGNAME" = "ORCA" ]; then
				find_energ
				find_methode
				find_version
				LEVEL="$METH"/"$BASIS"//"$LEVEL"
				NOTES=$(echo "$PROGNAME $REV / $NOTES")
			fi
			FILEPATH=$STOREFILEPATH
		fi
		
		SMDFILEPATH=$(echo $FILEPATH | rev | cut -f2-10 -d'.' | rev); 
		NUMSMD=$(find \( -wholename "$SMDFILEPATH[_-]SMD[_-]*.out" \) | wc -l)
		if [ "$NUMSMD" -eq 1 ]; then
			SMDFILEPATH=$(find \( -wholename "$SMDFILEPATH[_-]SMD[_-]*.out" \))
			SMDOUTPUT=$(doSMD -f $SMDFILEPATH -b -c)	### prints: Gsolv[a.u.] solvent level-of-theory
			SOLVENT=$(echo $SMDOUTPUT | awk '{print $2}')
			Gsolv=$(echo $SMDOUTPUT | awk '{print $1}')
		else
			Gsolv="$NA"
		fi
		
		LEVEL=$(echo $LEVEL | sed 's/RPBE1PBE/PBE0/g' | sed 's/def2SVP/def2-SVP/g')
}

function gen_SI_v1 {

find_charge
find_coords


echo -e  "Nummer: \t\t " >> SI.txt
echo -e  "Dateiname: \t $FILENAMFORMATTED" >> SI.txt
echo -e  "" >> SI.txt
echo -e  "E(el.) / hartree : \t $ENERG_EL" >> SI.txt
echo -e  "Methode: $METH / $BASIS" >> SI.txt
echo -e  "" >> SI.txt
echo -e  "Thermische Korrekturen / hartree" >> SI.txt
echo -e  "ZPVE:  $ZPVE   " >> SI.txt
echo -e  "E(therm.): $ENERG_THERM" >> SI.txt
echo -e  "H(korr.): $ENTHALPY" >> SI.txt
echo -e  "G(korr.): $GIBBS" >> SI.txt
echo -e  "Imaginäre Frequenzen:  $IMAG" >> SI.txt
echo -e  "" >> SI.txt
echo -e  "Ladung: $CHARGE   Multiplizität: $MULITPL " >> SI.txt
echo -e  "Koordinaten (X, Y, Z) / Angström " >> SI.txt
echo -e  "$COORDS_new" >> SI.txt
echo -e  "" >> SI.txt
echo -e  "" >> SI.txt
echo -e  "" >> SI.txt
echo -e  "" >> SI.txt


NOTES+="SI_written_(txt)"

# $ENERG_THERM $ENTHALPY $GIBBS $IMAG
}

function gen_SI_v2 {

find_charge
find_coords

COORDS_CSV=`echo "$COORDS_RAW" | sed -e 1d | sed -e 's/,0,/,/g' | sed -e 's/ //g '  | sed -e 's/,/;/g' `

echo -e  "Nummer: ; " >> SI.CSV
echo -e  "Dateiname: ; $FILENAMFORMATTED" >> SI.CSV
echo -e  "" >> SI.CSV
echo -e  "E(el.) / hartree : ; $ENERG_EL" >> SI.CSV
echo -e  "Methode: ; $METH / $BASIS" >> SI.CSV
echo -e  "" >> SI.CSV
echo -e  "Thermische Korrekturen / hartree" >> SI.CSV
echo -e  "ZPVE: ; $ZPVE ; E(therm.): ; $ENERG_THERM" >> SI.CSV
echo -e  "H(korr.): ; $ENTHALPY ;G(korr.): ; $GIBBS" >> SI.CSV
echo -e  "Imaginäre Frequenzen: ; $IMAG" >> SI.CSV
echo -e  "" >> SI.CSV
echo -e  "Ladung:  ; $CHARGE ; Multiplizität: ; $MULITPL " >> SI.CSV
echo -e  "Koordinaten (X, Y, Z) / Angström " >> SI.CSV
echo -e  " $COORDS_CSV " >> SI.CSV
echo -e  "" >> SI.CSV
echo -e  "" >> SI.CSV
echo -e  "" >> SI.CSV
echo -e  "" >> SI.CSV


NOTES+="SI_written_(CSV)"

}

function gen_SI_v3 {

find_charge
find_coords

COORDS_TAB1=`echo "$COORDS_RAW" | sed -e 1d | sed -e 's/,0,/,/g' | sed -e 's/ //g '  | sed -e 's/,/ /g' `
COORDS_TAB=`printf '%-3s\t%-14s\t%-14s\t%-14s\n' $COORDS_TAB1`


echo -e  "Number in this Plublication: $FILENAMFORMATTED  " >> SI.TXT
echo -e  "" >> SI.TXT
echo -e  "Energy \t\t\t Hartree" >> SI.TXT
echo -e  "E $METH/$BASIS \t$ENERG_EL" >> SI.TXT
echo -e  "E @CC-SP \t\t " >> SI.TXT
echo -e  "E @SMD \t\t " >> SI.TXT
echo -e  "ZPVE: \t\t\t$ZPVE " >> SI.TXT
echo -e  "@H(korr.): \t\t$ENTHALPY " >> SI.TXT
echo -e  "@G(korr.): \t\t$GIBBS " >> SI.TXT
echo -e  "number of imaginary frequencies: \t$IMAG" >> SI.TXT
echo -e  "" >> SI.TXT
echo -e  "$CHARGE $MULITPL " >> SI.TXT
echo -e  "$COORDS_TAB " >> SI.TXT
echo -e  "" >> SI.TXT
echo -e  "" >> SI.TXT
echo -e  "" >> SI.TXT
echo -e  "" >> SI.TXT


NOTES+="SI_written_(TXT)"

}

######################################################
#            end of functions block


#           start of actual script
######################################################


# show welcome message
echo -n "summary version $VERSION    "

while getopts ":hd:s:cn:v:i:f:" OPTION; do	# read variables
  case $OPTION in
    h) 
	vim $SCRIPTDIR/help_summary.txt  
	exit
	;;
	d)
	CSVDELIM=$OPTARG
	;;
	s)
	DECISEP=$OPTARG
	;;
	c)
	DEPTH=1
	echo "... searching in only the current folder"
	;;
	n)
	DEPTH=$OPTARG; echo "... searching in this and $DEPTH subfolder(s)"; DEPTH=$((DEPTH+1))
	;;
	v)
	VERBOSITY=$OPTARG # either 1 or 2 (default: 0)
	;;
	i)
	SI_vers=$OPTARG
	;;
	f)					
	VARFILE=$OPTARG
	;;
    \?)
	prnt_error
    echo "Invalid option: -$OPTARG" >&2
	echo "For Help type: summary -h"
	exit
    ;;
  esac
done


#Defining the depth of search (-c -n) or output file (-f)

 case $VARFILE in								
         all)
			if [ -z $DEPTH ]; then DEPTH=1000; echo "... searching in all subfolders"; fi
			if [ "$VERBOSITY" -ne 2 ]; then
				LIST=`find -maxdepth $DEPTH ! -name 'slurm*.out' -name "*.out"`
			else
				LIST=`find -maxdepth $DEPTH \( -name "*.out" ! -name "slurm*.out" ! -name "*_SMD_*.out" ! -name "*_SP.out" \)`
			fi
			LISTARR=($LIST)
         ;;
         *)									 
         echo "... search for file: "$VARFILE""
         LIST=`find -maxdepth 1 ! -name 'slurm*.out' -name "$VARFILE"`
         LISTARR=($LIST)
         ;;
 esac



# asks for user reply if too much files are found

if [ ${#LISTARR[@]} -gt $MAXFILES ]
then
	prnt_warning
	echo "found a large amount of OUT files"
	echo "${#LISTARR[@]} / $MAXFILES"
	read -p "Do you want to proceed ? " -n 1 -r 
		case $REPLY in
        [Yy]* ) echo "  OK";;
        [Nn]* ) echo ""; exit;;
        * ) echo "  Please answer Y or N."; exit ;;
        esac
else echo "found ${#LISTARR[@]} OUT files ... starting now"
fi



######################################################
# initialisation of the *.csv files

echo "summary" > $CSVFILEFILEPATH #
echo "user;$USERFILEPATH" >> $CSVFILEFILEPATH
echo "directory;$DIR" >> $CSVFILEFILEPATH
echo "host;$HOST" >> $CSVFILEFILEPATH
echo "host IP;$HOSTIP" >> $CSVFILEFILEPATH
echo "Hartree in kcal/mol;627.5095; REF: 10.1103/RevModPhys.84.1527 10.1063/1.4724320 10.1351/pac197951010001" >> $CSVFILEFILEPATH
echo " " >> $CSVFILEFILEPATH

######################################################

case $SI_vers in # checking for valid SI version
	0) # no SI file is written (default)
	;;
	1) # SImple textfile
	echo " " > SI.txt
	;;
	2) #SI in CSV format
	echo " SI generated with summary " > SI.CSV
	;;
	3) #SI in TXT format in english
	echo " SI generated with summary " > SI.TXT
	;;
	*)
	prnt_warning 
	echo "unknown SI version"
	echo "no Si file will be generated" 
	SI_vers=0
	;;
esac



#table headers for console output and *.csv files


case $VERBOSITY in
	0)
	echo "      FILEPATH            |  E(SCF)    |  ZP      | G(korr)  |NT |IF  |Program   |   notes"
	echo "--------------------------+------------+----------+----------+---+----+----------+----------- "
	#     1-H2.out                  | -1958.4542 | 0.325657 | 0.269497 | 1 |  0 |     ORCA |                                |

	TABLEHEAD="Filepath;filename;method; basisset; E(el); ZP corr.; E corr.; H corr.; G corr.; G_rv corr; imaginary frequencies; Normal terminations; programm; Revison; Runtime; Notes"
	echo "$TABLEHEAD" >> $CSVFILEFILEPATH
	;;
	1)
	echo "$ENERG_EL $ZPVE $ENERG_THERM $ENTHALPY $GIBBS"
	;;
	2)
	echo "      FILEPATH            |    E(SCF)    | H(korr)  | G(korr)  | G_rv(korr) |  G(solv)  | notes "
	echo "--------------------------+--------------+----------+----------+------------+-----------+-------"
	#     1-H2.out                  | -1958.4542xx | x.xxxxxx | 0.269497 | 0.xxxxxx   | -0.0xxxxx | ERROR 
	
	TABLEHEAD="Filepath;filename;E(el);H corr.;G corr.;G_rv corr;G_solv;Solvent;Stationary Point; Level of Theory; Notes"
	echo "$TABLEHEAD" >> $CSVFILEFILEPATH
	;;
esac




# actuale magic happens here
for FILEPATH in "${LISTARR[@]}" ; do

NOTES=""
reset_vars

# gathering Informations

case $VERBOSITY in
	2)
		ident_prog
		format_strings
		find_methode
#		find_energ
		find_ther_corr
		find_version
#		find_runtime
		find_Nimag_string
		merge_data
		
		echo "$FULLPATH;$FILENAME;$ENERG_EL;$ENTHALPY;$GIBBS;$Grotvib;$Gsolv;$SOLVENT;$IMAGSTRING;$LEVEL;$NOTES" >> $CSVFILEFILEPATH
	;;
	*)
		ident_prog
		format_strings
		find_methode
		find_energ
		find_ther_corr
		find_Nimag
		find_NTerm
		find_version
		find_runtime

		echo "$FULLPATH;$FILENAME;$METH;$BASIS;$ENERG_EL;$ZPVE;$ENERG_THERM;$ENTHALPY;$GIBBS;$Grotvib;$IMAG;$NTERM;$PROG;$REV;$RUNTIME;$NOTES" >> $CSVFILEFILEPATH		
	;;
esac	

#output to SI-file
case $SI_vers in # checking for valid SI version
	0) # no SI file is written (default)
	;;
	1) # SImple textfile
	gen_SI_v1
	;;
	2) #SI in CSV format
	gen_SI_v2
	;;
	2) #SI in CSV format
	gen_SI_v2
	;;
	3) #SI in TXT format
	gen_SI_v3
	;;
	*)
	prnt_error
	echo "Error in SI generation. stopping"
	exit
	;;
esac


#console output

case $VERBOSITY in
	0)
	
	# Formating of the displayed Variables:
	#ENERG_EL_FORM=`echo "$ENERG_EL" | cut -c -10 `
	
	
	printf '%-25s | ' $FILENAMFORMATTED 
	printf '%10.10s | ' $ENERG_EL
	printf '%8.8s | ' $ZPVE 
	printf '%8.8s | ' $GIBBS 
	printf '%1.1s | ' $NTERM 
	printf '%2.2s | ' $IMAG 
	printf '%8s | ' $PROGNAME 
	printf '%-30s ' $NOTES
	printf '\n'
	;;
	1)
	echo "$ENERG_EL $ZPVE $ENERG_THERM $ENTHALPY $GIBBS"	
	;;
	2)
	printf '%-25s | ' $FILEPATHFORMATTED 
	printf '%12.12s | ' $ENERG_EL
	printf '%8.8s | ' $ENTHALPY 
	printf '%8.8s | ' $GIBBS 
	printf '%8.9s   | ' $Grotvib
	printf '%9.9s | ' $Gsolv
	printf '%4.5s ' $IMAGSTRING
	printf '\n'
	;;
esac


done

######################################################
#post processing of the csv file
#change the CSV delimiter


if [ "$CSVDELIM" != ";" ]
then
	cp $CSVFILEFILEPATH $CSVFILEFILEPATH_BKUP
	awk '$1=$1' FS=";" OFS="$CSVDELIM" $CSVFILEFILEPATH_BKUP > $CSVFILEFILEPATH
fi

#change the decimal seperator

if [ "DECISEP" != "." ]
then
	cp $CSVFILEFILEPATH $CSVFILEFILEPATH_BKUP
	sed "s/\./$DECISEP/g" $CSVFILEFILEPATH_BKUP > $CSVFILEFILEPATH
	#awk '$1=$1' FS=";" OFS="$CSVDELIM" $CSVFILEFILEPATH_BKUP > $CSVFILEFILEPATH
fi



# printf '%3s\t%-14s\t%-14s\t%-14s\n' $COORDS
