#!/bin/bash

#####################################################################
#Flag fuer das Ausgeben des Hilfe Textfiles
#####################################################################

while getopts "h" OPTION
do
    case $OPTION in
    h)
 	help_pfad=$(dirname $0)
	vim "$help_pfad/help_out2xyz.txt" 
        exit
        ;;
*)
	echo -e "Usage of nonexistent flag.\033[31m Aborting.\033[0m"
	exit
	;;
    esac
done 


##############################################################
#Abbruch des Skripts, wenn kein Argument Ã¼bergeben wurde
##############################################################

if [ -z $1 ]; then
	echo -e "\033[31mNo argument. Aborting.\033[0m"
	exit
fi


##############################################################
#Falls Argument kein out-file ist, wird das Skript abgebrochen
##############################################################

dateiendung=$(echo $1 | grep -o -E ".out\>")

if [ -z $dateiendung ]; then
	echo -e "\033[31mArgument $1 is not an .out file. Aborting.\033[0m"
	exit
fi

##############################################################
#Anzahl der Atome und die "Rohkoordinaten" werden eingelesen
##############################################################

NATOMS=`grep -m 1 "NAtoms=" $1 | awk '{print $2}' | sed -e 's/ //g'`

COORDS_RAW=`grep -i -A $NATOMS "Redundant internal coordinates found in file." $1 ` #read the coordinates used for the frequency computation

##############################################################
#Das Skript erkennt, ob eine Frequenzrechnung ausgefuehrt wurde
#und falls nicht wird ein anderer Algorithmus ausgefuehrt
##############################################################

test=$(grep -i -o "Redundant internal coordinates found in file" $1)

if [[ -z $test ]]; then
		
	echo -e "\e[33mNo frequency calculation was performed.\033[0m"	

	declare -a atomart_nummer
	declare -a x_koord
	declare -a y_koord
	declare -a z_koord
	
	tac $1 | grep -m 1 -B $(($NATOMS+4)) "Standard orientation" > out2xyz_reverse.temp

	cat out2xyz_reverse.temp | tac | sed '1d;2d;3d;4d;5d' | tr -s " " > out2xyz.temp

	for ((var=1;var<=$NATOMS;var++))
	do
		atomart_nummer[$var]=$(head -n $var out2xyz.temp | tail -n 1 | awk ' { print $2 } ') 
		x_koord[$var]=$(head -n $var out2xyz.temp | tail -n 1 | awk ' { print $4 } ')
		y_koord[$var]=$(head -n $var out2xyz.temp | tail -n 1 | awk ' { print $5 } ')
		z_koord[$var]=$(head -n $var out2xyz.temp | tail -n 1 | awk ' { print $6 } ')
	done

	for ((var=1;var<=$NATOMS;var++))
	do
		echo -e "${atomart_nummer[$var]}\t${x_koord[$var]}\t${y_koord[$var]}\t${z_koord[$var]}" >> ${1/.out}.xyz
	done

	echo -e "Converting \033[1;32m$1\033[0m to \033[1;32m${1/.out}.xyz\033[0m"

	rm out2xyz.temp
	rm out2xyz_reverse.temp
	
	echo ""

	exit
fi

##############################################################
#Rohkoordinaten werden formatiert und in eine neue xyz Datei geschrieben
##############################################################

COORDS=`echo "$COORDS_RAW" | sed -e 1d | sed -e 's/,0,/,/g' | sed -e 's/,-/    -/g' | sed -e 's/,/     /g' | sed -e "1ipufferzeile" | sed -e "1i$NATOMS" | sed -e 's/pufferzeile//g'` # some nice formatting

echo -e "Converting \033[1;32m$1\033[0m to \033[1;32m${1/.out}.xyz\033[0m"
echo "$COORDS" > ${1/.out}.xyz


