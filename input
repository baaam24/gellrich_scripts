#!/bin/bash
#Test ob pullen funktioniert

programm=gaussian
prozessoren=12
hauptspeicher=10000
stunden=72
ausfuehren=false
route="# pbe1pbe/def2SV opt freq scf=tight int(grid=ultrafine) maxdisk=100gb empiricaldispersion=gd3"
transition_state="false"

while getopts "f:stH:n:m:hS" OPTION
do
	case $OPTION in 
	t)
		transition_state="true"
		route="# pbe1pbe/def2SV opt=(ts,noeigen,calcfc) freq scf=tight int(grid=ultrafine) maxdisk=100gb empiricaldispersion=gd3"
		;;
	f)
		file=$OPTARG
		;;
	n)
		prozessoren=$OPTARG
		;;
	m)
		hauptspeicher=$OPTARG
		;;
	H)
		stunden=$OPTARG
		;;
	s)
		ausfuehren=true
		;;
###########################################################################################
############################# ORCA SP DLPNO-CCSDT-Calculation #############################
###########################################################################################
	S)
		programm=orca
		route="! DLPNO-CCSD(T) NoUseSym def2-TZVP def2-TZVP/C tightscf"
		;;
	
	h)
		help_pfad=$(dirname $0)
		vim "$help_pfad/help_input.txt"  
		exit
		;;
	*)
		echo -e "Usage of nonexistent flag.\033[31m Aborting.\033[0m"
		exit
		;;
	esac
done

################Leerzeile fuer schoenere Formatierung######
echo ""

#########################################################
#Eingabe wird auf potentielle Fehler ueberprueft
#########################################################

dateiendung=$(echo $file | grep -o -E "(.xyz|.out)\>")

if [ ! -f "$file" ]; then
	echo -e "No Input-File or File does not exist (use the flag -f).\033[31m Aborting.\033[0m"
	echo "################################################################"
	exit
fi

if [ -z "$dateiendung" ]; then
	echo -e "\033[31mInput-File $file is no .xyz or .out File. Aborting.\033[0m"
	echo "################################################################"
	exit
fi

if [ "$transition_state" = "true" ] && [ "$programm" = "orca" ]; then
	echo -e "\033[31mTransition state with an ORCA single point calculation is not possible. Aborting.\033[0m"
	echo "################################################################"
	exit
fi

################################################################
#Falls es sich beim Input, um eine .out-Datei handelt, wird diese
#in eine xyz-Datei umgewandelt
################################################################


if [ $dateiendung = ".out" ]; then
	echo -e "Input-File $file is an .out-File. Try to convert to .xyz."
	
	test=$(grep -i -o "Redundant internal coordinates found in file" $file)

	if [[ -z $test ]]; then
		echo -e "\033[31mNo frequency calculation was performed. Aborting.\033[0m"
		echo "################################################################"
		exit
	fi

	out2xyz $file
	file=${file/.out}.xyz
fi

################################################################
#Ueberprueft anhand der Symbole fuer die Atomarten in der xyz-Datei
#(Chemcraft verwendet Zahlen, Avogadro Buchstaben), ob es sich um
#eine xyz-Datei aus Avogadro oder Gaussian handelt. Im Falle von
#Avogadro loescht er die ersten beiden Zeilen
################################################################

if [ $(grep -c '[[:upper:]]' $file) -ne 0 ]; then

	sed -i '1d;2d' $file
fi 

####################################################################
#Falls nicht der Flag -S gesetzt wurde, wird die Datei in die Input-
#Datei fuer die Gaussian Optimierungen umgewandelt
####################################################################
			if [ $programm = gaussian ]; then
	
sed -i '1i0 1' $file
sed -i '1ipufferzeile' $file
sed -i "1i${file/.xyz}" $file
sed -i '1ipufferzeile' $file
sed -i "1i$route" $file
sed -i "1i\%mem=${hauptspeicher}MB" $file
sed -i "1i\%nprocshared=${prozessoren}" $file
sed -i "1i\%chk=${file/.xyz}.chk" $file

echo 'pufferzeile' >> $file
echo 'pufferzeile' >> $file
echo 'pufferzeile' >> $file
echo 'pufferzeile' >> $file

sed -i 's/pufferzeile//g' $file

######################################################################
#Wenn ein TS-Input erstellt und die Datei noch kein TS-Präfix besitzt,
#benennt das Skript die Datei mit dem Praefix TS_ um
######################################################################

if [ "$transition_state" = "false" ]; then
	mv $file ${file/.xyz}.dat
	echo -e "\033[1;32mGaussian16\033[0m input file \033[1;32m${file/.xyz}.dat\033[0m is created from \033[1;32m$file\033[0m."
else
	ts_praefix=$(echo $file | grep -o 'TS_')
	prep_suffix=$(echo $file | grep -o '_prep')

	echo -e "\033[1;32mTransition State Gaussian16\033[0m input file for \033[1;32m ${file/.xyz}.dat\033[0m is created from \033[1;32m$file\033[0m."

	if [ -z $ts_praefix ] && [ -z $prep_suffix ]; then
		mv $file TS_${file/.xyz}.dat
	fi

	if [ -n $ts_praefix ] && [ -z $prep_suffix ]; then
		mv $file ${file/.xyz}.dat
	fi

	if [ -z $ts_praefix ] && [ -n $prep_suffix ]; then
		mv $file TS_${file/_prep.xyz}.dat
	fi

	if [ -n $ts_praefix ] && [ -n $prep_suffix ]; then
		mv $file ${file/_prep.xyz}.dat
	fi
fi

					fi
######################################################################
#Ende des Erstellens der Gaussian-Inputstruktur
######################################################################
######################################################################
#Falls die Flag -S gesetzt wurde, wird die ORCA-Inputstruktur fuer die
#DLPNO-CCSDT-Rechnungen erstellt
######################################################################
			if [ $programm = orca ]; then
echo "*" >> $file
sed -i '1i* xyz 0 1' $file
sed -i '1ipufferzeile' $file
sed -i '1iend' $file
sed -i "1i%pal nprocs=$prozessoren" $file
sed -i "1i%MaxCore $hauptspeicher" $file
sed -i '1ipufferzeile' $file
sed -i "1i$route" $file
	
sed -i 's/pufferzeile//g' $file

echo -e "\033[1;32mORCA\033[0m input file \033[1;32m${file/.xyz}_SP.gjf\033[0m is created from \033[1;32m$file\033[0m."

mv $file ${file/.xyz}_SP.gjf

					fi
######################################################################
#Ende des Erstellens der ORCA-Inputstruktur
######################################################################

if [ $ausfuehren = false ]; then
	echo -e "\e[33mFile will not be submitted\033[0m"
else 
	if [ $programm = gaussian ]; then
           gaussian16 $stunden:00:00
	elif [ $programm = orca ]; then
	   for file in *.gjf; do orca $file $stunden:00:00; done
	fi
fi

echo "################################################################"